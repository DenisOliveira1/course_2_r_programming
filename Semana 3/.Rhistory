print(i)
}
x = 1:5
for(i in 1:length(x)){
print(x[i])
}
for(i in seq_len(10)){
print(i)
}
for(i in x){
print(i)
}
for(i in x) print(i)
x = matrix(1:10, nrow=2, ncol = 5)
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
# 3. while
i = 1
while(i < 10){
print(i)
i = i + 1
}
# 4. repeat e break
i = 1
repeat{
print(i)
if (i == 10) {
break # para de fazer iterações
}
i = i + 1
}
# next
for (i in 1:30){
if (i < 20){
next # vai pra proxima iteração
}
print(i)
}
# 5. functions
# funções podem ser declaradas dentro de outras funções
# funções podem ser passadas como argumentos para outras funções
add2 = function(x,y){
x+y
}
above10 = function(x){
x[x > 10]
}
above = function(x, n=10){
x[x > n]
}
columnMean = function(y, removeNA = T){
nc = ncol(y)
means = c()
for(i in 1:nc){
means[i] = mean(y[,i], na.rm = removeNA)
}
means # funciona como um return
}
add2(5,6)
above10(c(1:20))
above(c(1:20))
above(c(1:20),15)
columnMean(airquality)
z=3 # procurar aqui depois
add3 = function(x,y){
# z = 1 # procurar aqui primeiro
x+y+z
}
add3(5,5)
make.power = function(n){
pow = function(x){
x^n
}
}
square = make.power(2)
cube = make.power(3)
# ao chamar a função make n é informado e a funçao é criada e retornada
# para a função retornada o número que é informado é o x
square(2)
cube(2)
ls(environment(make.power)) # o ambiente dessa função é o global
ls(environment(cube)) # o ambiente dessa função é o interior do make.power, onde foi criada
get("n", environment(cube)) # acessa a variabel dentro do ambiente informado
y = 10
f = function(x){
y = 2
y^2+ g(x) # 2^2 + g(10) = 4 + 10*x
}
g = function(x){
x*y
}
f(3)
ls(environment(g))
ls(environment(f)) # vai suar y = 2
ls(environment(f)) # vai suar y = 2
get("y", environment(g))
get("y", environment(f))
a.power = function(n){
pow = function(x){
x^n
}
}
square = a.power(2)
# ao chamar a função make n é informado e a funçao é criada e retornada
# para a função retornada o número que é informado é o x
square(2)
date()
date("1970-01-01")
as.date("1970-01-01")
as.Date("1970-01-01")
x = as.Date("1970-01-01")
unclass(x)
unclass(Date())
unclass(date())
unclass(date())
unclass(as.Date(date())
unclass(as.Date(date()))
unclass(as.Date(date()))
x = as.Date("1970-01-01")
unclass(x)
x = as.Date("1970-01-02")
unclass(x)
x = sys.time()
x = Sys.time()
x = Sys.time()
x
p = Posixlt(x)
p = as.Posixlt(x)
p = as.POSIXlt(x)
p
names(unclass(p))
p$sec
p$sec
p$hour
p$min
p = as.POSIXct(x)
p
names(unclass(p))
names(unclass(p))
p
p = as.POSIXct(x)
p
unclass(p)
unclass(p)
x = Sys.time()
p = as.POSIXlt(x)
unclass(p)
x = Sys.time()
p = as.POSIXct(x)
unclass(p)
strptime("December 9", %B %d, %Y %H: %M)
strptime("December 9", "%B %d, %Y %H: %M")
strptime("December 9", "%B %d, %Y %H: %M")
strptime("December 9", "%B %d, %Y %H: %M")
strptime("2011: 9:10", "%B %d, %Y %H: %M")
strptime("2011 9:10", "%B %d, %Y %H: %M")
strptime("2011 9:10", "%B %d, %Y %H: %M")
strptime("2011 9:10", "%H: %M")
strptime("2011 9:10", "%Y")
strptime("2011 9:10", "%Y %H: %M")
strptime("2011 9:10", "%Y %H:%M")
strptime("2011 9:10", "%B Y %H:%M")
strptime("2011 9:10", "%B %H:%M")
strptime("2011 9:10", "%Y %H:%M")
strptime("2011 9:10", "%Y %H:%m")
M
strptime("2011 9:10", "%Y %H:%M")
strptime("2011 9:10", "%B")
strptime("10/12/2011 9:10", "%Y %H:%M")
strptime(Date(), "%Y %H:%M")
strptime(date(), "%Y %H:%M")
date()
strptime(date(), "%Y")
strptime("2011 January 9:10", "%Y %H:%M")
strptime("2011 9:10", "%Y %H:%M")
strptime("2011-12-25 9:10", "%Y %H:%M")
strptime("2011-12-25 09:10", "%Y %H:%M")
strptime("2011-12-25 09:10", "%Y")
strptime("2011-25-12 09:10", "%Y %H:%M")
strptime("9 Jan 2011", "%Y %H:%M")
strptime("9 Jan 2011 9:31", "%Y %H:%M")
strptime("9 Jan 2011 09:31", "%Y %H:%M")
strptime("9 Jan 2011 09:31", "%Y")
as.date("2012-03-01") - as.date("2012-02-28")
as.Date("2012-03-01") - as.Date("2012-02-28")
as.POSIXct("2012-10-25 01:00:00" ) - as.POSIXct("2012-10-25 06:00:00")
as.Date("2012-03-01") - as.Date("2012-02-28")
as.Date("2012-03-01") - as.Date("2012-02-28") # diferença em dias
as.POSIXct("2012-10-25 06:00:00") - as.POSIXct("2012-10-25 01:00:00" ) # diferença em horas
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x) # 3 + g(3) = 3 + 12  =16
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
z <- cbind(x, d)
cube <- function(x, n) {
x^3
}
cube(3)
cube <- function(x, n) {
x^3
}
cube(3)
setwd("~/Área de Trabalho/R Programming/Semana 3")
rnorm(10)
x = list(a = 1:5, b = rnorm(10))
y = lapply(x, mean)
y
x = list(a = 1:5, b = rnorm(10), 10)
x
y = lapply(x, mean)
y
y = lapply(1:4, runif)
y
y = lapply(1:4, runif, min=4, max=10)
y
y
x = list(a = 1:5, b = rnorm(10), 10)
rnorm(10)
x = list(a = matrix(1:4,2,2), b = matrix(1:6,3,2))
# uma função anônima (sem nome)
x = list(a = matrix(1:4,2,2), b = matrix(1:6,3,2))
y = lapply(x, function(x) x[,1])
y
x = list(a = 1:5, b = rnorm(10), 10)
y = lapply(x, mean)
y
y = sapply(x, mean)
y
x = matrix(rnorm(200),20,10)
x = matrix(rnorm(200),20,10)
y = apply(x,2,mean)
x = 1:5
y = apply(x,2,mean)
x = 1:5
y = apply(x,1,mean)
y = apply(x,1,quantile, probs = c(0.25,0.75) )
# existe funções como colSums, colMeans, rowSums  e rowMeans que são ainda mais otimizadas e rápidas
x = matrix(rnorm(200),20,10)
y = apply(x,1,quantile, probs = c(0.25,0.75) )
y
x
x = array(1,2)
x
c(1,1)
x = array(rnorm(2*2*10))
x
x = array(rnorm(40),c(2,2,10))
x
# criando um array de dimensões 2x3x10. 2 linhas, 3 colunas, 10 terceiras. é como se fossem 10 matrizes 2x2
x = array(rnorm(40),c(2,3,10))
x
# criando um array de dimensões 2x3x10. 2 linhas, 3 colunas, 10 terceiras. é como se fossem 10 matrizes 2x3
x = array(rnorm(40),c(2,3,10))
y = apply(x,c(1,2),mean)
y
y =  rowMeans(x, dims=2)
y
x = list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
x
arg1 = 1:4
arg2 = 4:1
taply(rep,arg1,arg2)
arg1 = 1:4
arg2 = 4:1
x = tapply(rep,arg1,arg2)
arg1 = 1:4
arg2 = 4:1
x = mapply(rep,arg1,arg2)
x
x = mapply(noise,1:5,5:1,2)
noise  = function(n, mean, sd){
rnorm(n,mean,sd)
}
x = mapply(noise,1:5,5:1,2)
x
x = mapply(noise,1:5,1:5,2)
x
x = c(rnorm(10), runif(10), rnorm(10,1))
f = gl(3,10) # cria um factor de 3 niveis e repete cada um deles 10 vezes
gl
f = gl(3,10) # cria um factor de 3 niveis e repete cada um deles 10 vezes
f
y = tapply(x,f,mean)
y
y = tapply(x,f,range)
y
x = c(rnorm(10), runif(10), rnorm(10,1)) # cria um vetor de 30 números
f = gl(3,10) # cria um factor de 3 niveis e repete cada um deles 10 vezes
y = split(x,f)
y
x = c(rnorm(10), runif(10), rnorm(10,1)) # cria um vetor de 30 números
f = gl(3,10) # cria um factor de 3 niveis e repete cada um deles 10 vezes
y = lapply(split(x,f),mean) # mesma coisa quetapply(x,f,mean)
y
y = tapply(x,f,mean)
y
y = lapply(split(x,f),mean) # mesma coisa quetapply(x,f,mean), porem o tapply retorna uma lista
y
y = tapply(x,f,mean)
y
library(datasets)
head(airquality)
y = split(airquality,airquality$Month)
y
y = lapply(x, function(x) colMeans(x["Ozone","Solar.R","Wind"]))
y = lapply(x, function(x) colMeans(x["Ozone","Solar.R","Wind")]))
y = lapply(x, function(x) colMeans(x["Ozone","Solar.R","Wind")]))
y = lapply(x, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
s = split(airquality,airquality$Month)
y = lapply(x, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]))
y = lapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]))
y
y = lapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
y
y = lapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
y
y
y = sapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
y
f = interaction(f1,f2)
f1 = gl(2,5) # cria um factor de 2 niveis e repete cada um deles 5 vezes
f2 = gl(5,2) # cria um factor de 5 niveis e repete cada um deles 2 vezes
f = interaction(f1,f2)
f
s = split(x, c(f1,f2))
x = 1:20
s = split(x, c(f1,f2))
s
s = split(x, list(f1,f2))
s
s
x = 1:10
s = split(x, list(f1,f2))
s
str(plit(x, list(f1,f2)))
str(split(x, list(f1,f2)))
x = null
x = NA
str(split(x, list(f1,f2)))
str(split(airquality, list(airquality$Month,airquality$Day))
s = split(airquality, list(airquality$Month,airquality$Day))
s = split(airquality, list(airquality$Month,airquality$Day))
s
s = split(airquality, list(airquality$Month,airquality$Temp))
s
s = split(airquality, list(airquality$Month,airquality$Temp), drop = T)
s
printMsg = function(x) print(x)
printMsg("oi")
printMsg = function(x) x
printMsg("oi")
returnValue = function(x) x
returnValue("oi")
returnValue2 = function(x) invisible(x)
returnValue2("oi")
mean(j) # j não existe
traceback()
mean(j)
debug(mean)
mean(j)
debug(mean) # toda vez que a função for executada ela entra em modo debug
mean(1:5)
UseMethod("mean")
function (x, trim = 0, na.rm = FALSE, ...)
{
if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {
warning("argument is not numeric or logical: returning NA")
return(NA_real_)
}
if (na.rm)
x <- x[!is.na(x)]
if (!is.numeric(trim) || length(trim) != 1L)
stop("'trim' must be numeric of length one")
n <- length(x)
if (trim > 0 && n) {
if (is.complex(x))
stop("trimmed means are not defined for complex data")
if (anyNA(x))
return(NA_real_)
if (trim >= 0.5)
return(stats::median(x, na.rm = FALSE))
lo <- floor(n * trim) + 1
hi <- n + 1 - lo
x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
}
.Internal(mean(x))
}
function (x, ...)
UseMethod("mean")
source('~/Área de Trabalho/R Programming/Semana 3/semana3.R')
source('~/Área de Trabalho/R Programming/Semana 3/semana3.R')
function (x, ...)
UseMethod("mean")
function (x, trim = 0, na.rm = FALSE, ...)
{
if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {
warning("argument is not numeric or logical: returning NA")
return(NA_real_)
}
if (na.rm)
x <- x[!is.na(x)]
if (!is.numeric(trim) || length(trim) != 1L)
stop("'trim' must be numeric of length one")
n <- length(x)
if (trim > 0 && n) {
if (is.complex(x))
stop("trimmed means are not defined for complex data")
if (anyNA(x))
return(NA_real_)
if (trim >= 0.5)
return(stats::median(x, na.rm = FALSE))
lo <- floor(n * trim) + 1
hi <- n + 1 - lo
x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
}
.Internal(mean(x))
}
function (x, ...)
UseMethod("mean")
function (x, trim = 0, na.rm = FALSE, ...)
{
if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {
warning("argument is not numeric or logical: returning NA")
return(NA_real_)
}
if (na.rm)
x <- x[!is.na(x)]
if (!is.numeric(trim) || length(trim) != 1L)
stop("'trim' must be numeric of length one")
n <- length(x)
if (trim > 0 && n) {
if (is.complex(x))
stop("trimmed means are not defined for complex data")
if (anyNA(x))
return(NA_real_)
if (trim >= 0.5)
return(stats::median(x, na.rm = FALSE))
lo <- floor(n * trim) + 1
hi <- n + 1 - lo
x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
}
.Internal(mean(x))
}
function (x, ...)
UseMethod("mean")
function (x, trim = 0, na.rm = FALSE, ...)
{
if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {
warning("argument is not numeric or logical: returning NA")
return(NA_real_)
}
if (na.rm)
x <- x[!is.na(x)]
if (!is.numeric(trim) || length(trim) != 1L)
stop("'trim' must be numeric of length one")
n <- length(x)
if (trim > 0 && n) {
if (is.complex(x))
stop("trimmed means are not defined for complex data")
if (anyNA(x))
return(NA_real_)
if (trim >= 0.5)
return(stats::median(x, na.rm = FALSE))
lo <- floor(n * trim) + 1
hi <- n + 1 - lo
x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
}
.Internal(mean(x))
}
function (x, ...)
UseMethod("mean")
mean(1:5)
x
x
x
x
x
x
mean(1:5)
x
x
mean(j)
mean(j)
# 6.3 Recover
options(error = recover)
# no browser(console) n + enter ou f10 para andar pro proximo step
undebug(mean) # remove debug da função
mean(j)
mean(j)
# 6.3 Recover
options(error = recover)
mean(j)
mean(j)
